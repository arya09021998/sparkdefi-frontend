{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/PredictionPromotionCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","toastError","useToast","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","message","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","fullWidth","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","useIntersectionObserver","observerRef","useRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","current","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","StyledPredictionCard","sm","md","StyledHeaderText","Text","StyledText","StyledBalance","Balance","StyledSkeleton","Skeleton","StyledBNBSoFarText","PredictionPromotionCard","slowRefresh","loadData","setLoadData","bnbBusdPrice","usePriceBnbBusd","bnbWon","setBnbWon","bnbWonInUsd","setBnbWonInUsd","getTotalWon","totalWon","fetchMarketData","bnbWonInUsdText","toString","amount","over","bnbSoFar","bold","prefix","href","px","alignItems","WinCard","Hero","Cards","BaseLayout","CTACards","Home","Page","as","FarmStakingCard","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/10.305e698a.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FarmWithBalance } from 'hooks/useFarmsWithBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\ninterface CakeHarvestBalanceProps {\r\n  farmsWithBalance: FarmWithBalance[]\r\n}\r\n\r\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\r\n    const earningNumber = new BigNumber(earning.balance)\r\n    if (earningNumber.eq(0)) {\r\n      return accum\r\n    }\r\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\r\nimport { harvest } from 'utils/callHelpers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const masterChefContract = useMasterchef()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const farmWithBalance of balancesWithValue) {\r\n      try {\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await harvest(masterChefContract, farmWithBalance.pid, account)\r\n      } catch (error) {\r\n        toastError(t('Error'), error?.message)\r\n      }\r\n    }\r\n    setPendingTx(false)\r\n  }, [account, balancesWithValue, masterChefContract, toastError, t])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? t('Collecting CAKE')\r\n                : t('Harvest all (%count%)', {\r\n                    count: balancesWithValue.length,\r\n                  })}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" fullWidth/>\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <Skeleton height={66} />\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useIntersectionObserver = () => {\r\n  const observerRef = useRef<HTMLDivElement>(null)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const [isIntersecting, setIsIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\r\n      setIsIntersecting(entry.isIntersecting)\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      intersectionObserver.observe(observerRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  return { observerRef, isIntersecting }\r\n}\r\n\r\nexport default useIntersectionObserver\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    if (isIntersecting) {\r\n      fetchFarmData()\r\n    }\r\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earnUpTo}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr && !isFetchingFarmData ? (\r\n              `${highestApr}%`\r\n            ) : (\r\n              <>\r\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n                <div ref={observerRef} />\r\n              </>\r\n            )}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InFarms}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\n\r\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\r\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n// Always include CAKE\r\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\r\n\r\nconst EarnAssetCard = () => {\r\n  const { t } = useTranslation()\r\n  const assetText = t('Earn %assets% in Pools', { assets })\r\n  const [earn, InPools] = assetText.split(assets)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earn}\r\n          </Heading>\r\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InPools}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, ArrowForwardIcon, Link, Button, Text, Skeleton, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getTotalWon } from 'state/predictions/helpers'\r\nimport { usePriceBnbBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport Balance from '../../../components/Balance'\r\n\r\nconst StyledPredictionCard = styled(Card)`\r\n  background-image: url('/images/prediction_promotion.png');\r\n  background-repeat: no-repeat;\r\n  background-position: bottom right;\r\n  background-size: 50%;\r\n  min-height: 376px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    background-size: 45%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    background-size: 50%;\r\n  }\r\n`\r\n\r\nconst StyledHeaderText = styled(Text)`\r\n  font-size: 28px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 40px;\r\n  }\r\n`\r\n\r\nconst StyledText = styled(Text)`\r\n  font-size: 36px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 50px;\r\n  }\r\n`\r\n\r\nconst StyledBalance = styled(Balance)`\r\n  font-size: 36px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 50px;\r\n  }\r\n`\r\n\r\nconst StyledSkeleton = styled(Skeleton)`\r\n  height: 40px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    height: 55px;\r\n  }\r\n`\r\n\r\nconst StyledBNBSoFarText = styled(Text)`\r\n  font-size: 22px;\r\n  line-height: 1.1;\r\n  font-weight: 600;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst PredictionPromotionCard = () => {\r\n  const { t } = useTranslation()\r\n  const { slowRefresh } = useRefresh()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const [loadData, setLoadData] = useState(false)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const [bnbWon, setBnbWon] = useState(0)\r\n  const [bnbWonInUsd, setBnbWonInUsd] = useState(0)\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setLoadData(true)\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  useEffect(() => {\r\n    const fetchMarketData = async () => {\r\n      const totalWon = await getTotalWon()\r\n      setBnbWon(totalWon)\r\n    }\r\n\r\n    if (loadData) {\r\n      fetchMarketData()\r\n    }\r\n  }, [slowRefresh, loadData])\r\n\r\n  useEffect(() => {\r\n    if (bnbBusdPrice.gt(0) && bnbWon > 0) {\r\n      setBnbWonInUsd(bnbBusdPrice.times(bnbWon).toNumber())\r\n    }\r\n  }, [bnbBusdPrice, bnbWon])\r\n\r\n  const bnbWonInUsdText = bnbWonInUsd ? bnbWonInUsd.toString() : '-'\r\n  const wonBNBText = t('Over %amount% in BNB won so far', { amount: bnbWonInUsdText })\r\n  const [over, bnbSoFar] = wonBNBText.split(bnbWonInUsdText)\r\n\r\n  return (\r\n    <StyledPredictionCard>\r\n      <CardBody>\r\n        <StyledHeaderText mb=\"24px\">{t('Predictions Now Live')}</StyledHeaderText>\r\n        <StyledText bold color=\"#7645d9\">\r\n          {over}\r\n        </StyledText>\r\n        {bnbWonInUsd ? (\r\n          <StyledBalance mb=\"24px\" color=\"#7645d9\" bold prefix=\"$\" decimals={0} value={bnbWonInUsd} />\r\n        ) : (\r\n          <>\r\n            <StyledSkeleton animation=\"pulse\" variant=\"rect\" mb=\"24px\" width={180} />\r\n            <div ref={observerRef} />\r\n          </>\r\n        )}\r\n        <StyledBNBSoFarText bold mb=\"24px\">\r\n          {bnbSoFar}\r\n        </StyledBNBSoFarText>\r\n        <Text color=\"textSubtle\" mb=\"24px\">\r\n          *{t('Beta Version')}\r\n        </Text>\r\n        <Link href=\"https://pancakeswap.finance/prediction\">\r\n          <Button px={['14px', null, null, null, '20px']}>\r\n            <Flex alignItems=\"center\">\r\n              <Text color=\"white\" bold fontSize=\"16px\">\r\n                {t('Try Now')}\r\n              </Text>\r\n              <ArrowForwardIcon color=\"white\" />\r\n            </Flex>\r\n          </Button>\r\n        </Link>\r\n      </CardBody>\r\n    </StyledPredictionCard>\r\n  )\r\n}\r\n\r\nexport default PredictionPromotionCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {t('Lottery')} V2\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\" />\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport PredictionPromotionCard from './components/PredictionPromotionCard'\r\nimport WinCard from './components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {t('PancakeSwap')}\r\n        </Heading>\r\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <PredictionPromotionCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}