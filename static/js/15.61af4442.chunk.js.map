{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/Styled.tsx","views/Farms/components/Modals/Styled.tsx","views/Farms/components/Modals/Stake.tsx","views/Farms/components/Modals/ClaimModal.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","Wrapper","styled","Flex","CardHeading","Tag","lpLabel","farmSymbol","multiplier","isCommunityFarm","farmImage","tokenSymbol","rewardToken","token","quoteToken","justifyContent","alignItems","mb","flexDirection","style","textAlign","split","TokenPairImage","variant","primaryToken","secondaryToken","width","height","WithdrawModal","onConfirm","onDismiss","max","tokenName","useState","val","setVal","fullBalance","useTranslation","t","useMemo","getFullDisplayBalance","BigNumber","useCallback","e","currentTarget","validity","valid","value","replace","title","marginTop","fontSize","bold","margin","padding","fullWidth","Container","div","DetailsCont","ActionDiv","ModalFooter","StyledFlex","CancelButton","Button","DepositButton","Stake","symbol","addLiquidityUrl","inputTitle","pendingTx","setPendingTx","valNumber","fullBalanceNumber","handleChange","handleSelectMax","ModalInput","onSelectMax","onChange","onClick","disabled","isFinite","eq","gt","a","ClaimModal","DepositModal","addTokenUrl","tokenReward","tokenBalance","stakedBalance","tokenEarnings","tokenRewardAddress","handleUnstake","farm","maxStake","setRequestedApproval","activeSelect","setActiveSelect","userData","allowance","allowanceAsString","tokenBalanceAsString","earnings","account","useWeb3React","dispatch","useAppDispatch","RewardTokenBalance","useTokenBalance","formatTokenBalance","getBalanceNumber","balance","pid","lpAddresses","lpAddress","getAddress","lpContract","isGreaterThan","useERC20","onApprove","useApprove","fetchFarmUserDataAsync","pids","console","error","getBalanceAmount","BIG_ZERO","useModal","onPresentStake","onPresentClaim","color","paddingBottom","paddingTop","as","href","display","onMouseEnter","onMouseLeave","position","target","StakeAction","onStake","useStake","onUnstake","useUnstake","location","useLocation","useLpTokenPrice","amount","stakedBalanceBigNumber","lt","toLocaleString","toFixed","ROUND_DOWN","address","onPresentDeposit","some","item","pathname","includes","Action","CardActions","stakedBalanceAsString","earningsAsString","lpSymbol","UnlockButton","mt","AccentGradient","keyframes","StyledCardAccent","theme","colors","primaryBright","secondary","FCard","props","card","background","primary","isPromotedFarm","radii","FarmCard","cardBorder","expanded","removed","cakePrice","totalValueFormatted","liquidity","toNumber","undefined","maximumFractionDigits","toLocaleLowerCase","toUpperCase","earnLabel","dual","apr","BASE_ADD_LIQUIDITY_URL","AddTokenUrl","BASE_EXCHANGE_URL","useContext","ThemeContext","isCommunity","border","backgroundColor","CardActionsContainer","Object","prototype","hasOwnProperty","call","mediaQueries","sm","Text","Image","Farms","useRouteMatch","path","useFarms","farmsLP","data","userDataLoaded","usePriceCakeBusd","query","usePersistState","TABLE","localStorageKey","sortOption","isArchived","isInactive","isActive","usePollFarmsData","stakedOnly","setStakedOnly","useEffect","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","latinise","toLowerCase","loadMoreRef","useRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","Number","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","current","originalValue","label","earned","details","Page","marginLeft","marginBottom","ref"],"mappings":"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","file":"static/js/15.61af4442.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@sparkpointio/sparkswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  farmSymbol?: string\n  tokenSymbol?: string\n  rewardToken?:string\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n  farmSymbol,\n  rewardToken,\n  token,\n  quoteToken\n}) => {\n\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading  mb=\"4px\" style={{textAlign: 'left'}}>Stake {lpLabel.split(' ')[0]} <br /> {farmSymbol} <br /> to Earn {rewardToken}</Heading>\n      </Flex>\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      {/* <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} /> */}\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, Text, Flex } from '@sparkpointio/sparkswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n        <Text fontSize=\"28px\" bold>AND</Text>\n        <Text>withdrawing the staked amount of</Text>\n        <Text fontSize=\"28px\" bold>678.910 SRK-ETH LP Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\n\nconst Container = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n    height: auto;\n`\n\nconst DetailsCont = styled.div`\n    width: 30%;\n    height: auto;\n    overflow: visible;\n`\n\nconst ActionDiv = styled.div`\n    margin: 15px 0px;\n    padding: 10px;\n`\nconst ModalFooter = styled.div`\n    min-width: 720px;\n    display: flex;\n    justify-content: space-between;\n`\n\nexport { DetailsCont, ActionDiv, ModalFooter }\nexport default Container;\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Button } from '@sparkpointio/sparkswap-uikit' \n\nconst Container = styled.div`\n    margin-top: -30px;\n    display: flex;\n    flex-direction: column;\n    min-width: 500px;\n`\nconst StyledFlex = styled(Flex)`\n    padding: 10px 0px;\n`\nconst CancelButton = styled(Button)`\n    flex: 1;\n    margin-right: 10px;\n`\nconst DepositButton = styled(Button)`\n    flex: 1;\n    margin-left: 10px;\n`\n\nexport {StyledFlex, CancelButton, DepositButton}\nexport default Container;\n\n","import BigNumber from 'bignumber.js'\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Modal, Text } from '@sparkpointio/sparkswap-uikit'\nimport ModalInput from 'components/ModalInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport Container, { CancelButton, DepositButton, StyledFlex } from './Styled'\n\ninterface StakeModalInterface {\n  onDismiss?: () => void\n  max: BigNumber\n  symbol: string\n  placeholder?: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  onConfirm: (amount: string) => void\n}\n\nconst Stake: React.FC<StakeModalInterface> = ({ onDismiss, max, symbol, addLiquidityUrl, inputTitle, onConfirm, }) => {\n  const [val, setVal] = useState('0')\n  const [pendingTx, setPendingTx] = useState(false)\n  const valNumber = new BigNumber(val)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  return (\n    <Modal title=\"\" onDismiss={!pendingTx && onDismiss}>\n      <Container>\n        <Text>Stake amount: </Text>\n        <ModalInput\n          value={val}\n          onSelectMax={handleSelectMax}\n          onChange={handleChange}\n          max={fullBalance}\n          symbol={symbol}\n          addLiquidityUrl={addLiquidityUrl}\n          //  inputTitle={t('Stake')}\n        />\n      </Container>\n      <StyledFlex justifyContent=\"space-between\">\n        <Text>Appoved tokens: </Text>\n        <Text>00.00</Text>\n      </StyledFlex>\n      <StyledFlex justifyContent=\"space-between\">\n        <CancelButton \n        onClick={onDismiss}\n        disabled={pendingTx}\n        >\n         Approve\n        </CancelButton>\n        <DepositButton\n        // disable Deposit button if not yet approved\n        disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n        onClick={async () => {\n          try {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }\n          catch (e) {\n            setPendingTx(false)\n          }\n        }}\n        >\n        Deposit\n        </DepositButton>\n      </StyledFlex>\n    </Modal>\n  )\n}\n\nexport default Stake\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Modal, Text, Flex } from '@sparkpointio/sparkswap-uikit'\n\ninterface ClaimModalProps {\n  onDismiss?: () => void\n}\n\nconst ClaimModal: React.FC<ClaimModalProps> = ({ onDismiss}) => {\n  \n  return (\n    <Modal title=\"\" onDismiss={onDismiss}>\n      {/* <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions> */}\n      <Flex marginTop=\"-10px\" style={{width: '450px'}} alignItems=\"center\" flexDirection=\"column\">\n        <Text>You will be claiming the reward amount of </Text>\n        <Text fontSize=\"28px\" bold>78.912 SRK Tokens</Text>\n      </Flex>\n      <Flex justifyContent=\"center\" margin=\"24px\" padding=\"0px 35px\">\n        <Button fullWidth>Confirm</Button>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Modal, LinkExternal, Text, useModal, Dropdown } from '@sparkpointio/sparkswap-uikit'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20 } from 'hooks/useContract'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useAppDispatch } from 'state'\nimport { Farm } from 'state/types'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount, getFullDisplayBalance, getBalanceNumber} from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport WithdrawModal from './WithdrawModal'\nimport Container, { ActionDiv, DetailsCont, ModalFooter } from './Styled'\nimport { ModalHr } from './Divider'\nimport StakeModal from './Modals/Stake'\nimport ClaimModal from './Modals/ClaimModal'\n\n\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  tokenReward?: string\n  tokenRewardAddress?: string\n  tokenBalance?: string\n  stakedBalance?: string\n  tokenEarnings?: string\n  farm?: Farm\n  handleUnstake?: (amount: string) => void\n  maxStake?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl,\n  addTokenUrl,\n  tokenReward,\n  tokenBalance,\n  stakedBalance,\n  tokenEarnings,\n  tokenRewardAddress,\n  handleUnstake,\n  farm,\n  maxStake\n}) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const [activeSelect, setActiveSelect] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const earnings = new BigNumber(tokenBalanceAsString)\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch();\n  const RewardTokenBalance = useTokenBalance(tokenRewardAddress)\n  const formatTokenBalance = getBalanceNumber(RewardTokenBalance.balance)\n  const { pid, lpAddresses } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const lpContract = useERC20(lpAddress)\n  const { onApprove } = useApprove(lpContract)\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const [onPresentStake] = useModal(\n    <StakeModal onConfirm={onConfirm} max={max} symbol={tokenName} addLiquidityUrl={addLiquidityUrl} inputTitle={t('Stake')} />,\n  )\n\n  const [onPresentClaim] = useModal (<ClaimModal />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={maxStake} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  return (\n    <Modal title={t('Account Info')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" fontSize=\"14px\" style={{ paddingBottom: '30px', marginTop: '-40px' }}>\n        Staking, balances & earnings\n      </Text>\n      <Container>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\" >\n          {formatTokenBalance === 0? '0.0000': formatTokenBalance}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {tokenReward}\n          </Text>\n          <ActionDiv style={{ paddingTop: '30px' }}>\n            <Button fullWidth as=\"a\" href={addTokenUrl}>\n              Add More\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n          {tokenBalance === '0'? '0.0000' : {tokenBalance}}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {tokenName} Tokens\n          </Text>\n          <ActionDiv style={{ paddingTop: '30px' }}>\n            <Button fullWidth as=\"a\" href={addLiquidityUrl}>\n              Add Liquidity\n            </Button>\n          </ActionDiv>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n          {stakedBalance === '0'? '0.0000' : {stakedBalance}}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            Your {tokenName} Deposits\n          </Text>\n          <ActionDiv style={{ paddingTop: '30px' }}>\n             {/* {isApproved? */}\n              <Button fullWidth onClick={onPresentStake}>\n                Stake Tokens\n              </Button>\n              {/* <Button fullWidth onClick={handleApprove} disabled={requestedApproval}>\n                Stake Tokens\n              </Button> */}\n             {/* } */}\n            \n          </ActionDiv>\n        </DetailsCont>\n      </Container>\n      <ModalHr />\n      <ModalFooter>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            0.0000\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`Your Rate ${tokenReward}/week`}</Text>\n        </DetailsCont>\n        <DetailsCont>\n          <Text bold fontSize=\"24px\">\n            {tokenEarnings === '0'? '0.0000': tokenEarnings}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">{`${tokenReward} Token Earnings`}</Text>\n        </DetailsCont>\n        <DetailsCont\n          style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n          onMouseEnter={() => setActiveSelect(true)}\n          onMouseLeave={() => setActiveSelect(false)}\n        >\n          <Dropdown\n            position=\"top\"\n            target={\n              <Button variant=\"secondary\" onClick={onDismiss}>\n                <Text>Withdraw</Text> {activeSelect ? <ChevronDown /> : <ChevronUp />}\n              </Button>\n            }\n          >\n            <Button fullWidth onClick={onPresentClaim}>\n              <Text>Claim</Text>\n            </Button>\n            <Button fullWidth onClick={onDismiss}>\n              <Text>Claim & Withdraw</Text>\n            </Button>\n          </Dropdown>\n        </DetailsCont>\n      </ModalFooter>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@sparkpointio/sparkswap-uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { Farm } from 'state/types'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n  farm?: Farm\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n  addTokenUrl,\n  farm,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={onStake}\n      tokenName={tokenName}\n      addLiquidityUrl={addLiquidityUrl}\n      addTokenUrl={addTokenUrl}\n      tokenReward={farm.quoteToken.symbol}\n      tokenRewardAddress={farm.quoteToken.address[97]}\n      tokenBalance={farm.userData.tokenBalance}\n      stakedBalance={farm.userData.stakedBalance}\n      tokenEarnings={farm.userData.earnings}\n      farm={farm}\n      handleUnstake={handleUnstake}\n      maxStake={stakedBalance}\n    />\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        fullWidth\n      >\n        {t('Deposit')}\n      </Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@sparkpointio/sparkswap-uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  addTokenUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, addTokenUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance  // && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n  const renderDepositButton = () => {\n    return (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        addTokenUrl={addTokenUrl}\n        farm={farm}\n      />\n    ) \n  }\n\n  return (\n    <Action>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderDepositButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState, useContext } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes, ThemeContext } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL, BASE_EXCHANGE_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  // background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border: 5px solid ${(props) => props.theme.colors.primary};\n  // border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n\n  // const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}`\n  const AddTokenUrl = `${BASE_EXCHANGE_URL}/#/swap/${farm.token.address[56]}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n  const theme = useContext(ThemeContext)\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        farmSymbol={farm.lpSymbol}\n        tokenSymbol={farm.token.symbol}\n        rewardToken={farm.quoteToken.symbol}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n      />\n      <hr style={{width: '100%', border: 'none', backgroundColor: theme.colors.primary, height: '2px'}}/>\n      {/* {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )} */}\n\n\n      \n      <Flex justifyContent=\"space-between\" style={{textAlign: 'left'}}>\n        <Text>{t('Total Deposit')}</Text>\n        <Text color=\"textSubtle\">{totalValueFormatted}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Pool Rate')}</Text>\n        <Text color=\"textSubtle\">{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('APR')}</Text>\n        <Text color=\"textSubtle\">0%</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Your Rate')}</Text>\n        <Text color=\"textSubtle\">{farm.userData.earnings}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Duration')}</Text>\n        <Text color=\"textSubtle\">{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} addTokenUrl={AddTokenUrl} />\n      {/* <Divider /> */}\n      {/* <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper> */}\n       <Flex justifyContent=\"center\">\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '56') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Binance Smart Chain')}</Text>)}\n         {Object.prototype.hasOwnProperty.call(farm.lpAddresses, '1') && (<Text color=\"textSubtle\" fontSize=\"14px\">{t('This will only work on Ethereum Blockchain')}</Text>)}\n      </Flex>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport { StyledHr } from './components/Divider'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n\n  const renderActiveContent = (): JSX.Element => {\n    // if (viewMode === ViewMode.TABLE && rowData.length) {\n    //   const columnSchema = DesktopColumnSchema\n\n    //   const columns = columnSchema.map((column) => ({\n    //     id: column.id,\n    //     name: column.name,\n    //     label: column.label,\n    //     sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n    //       switch (column.name) {\n    //         case 'farm':\n    //           return b.id - a.id\n    //         case 'apr':\n    //           if (a.original.apr.value && b.original.apr.value) {\n    //             return Number(a.original.apr.value) - Number(b.original.apr.value)\n    //           }\n\n    //           return 0\n    //         case 'earned':\n    //           return a.original.earned.earnings - b.original.earned.earnings\n    //         default:\n    //           return 1\n    //       }\n    //     },\n    //     sortable: column.sortable,\n    //   }))\n\n    //   return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    // }\n\n    return (\n      <div>\n        <div style={{ marginTop: '-5px', marginLeft: '17px', marginBottom: '17px' }}>\n          <Text fontSize=\"24px\" bold>\n            {' '}\n            Active Liquidity Pools{' '} \n          </Text>\n          <Text fontSize=\"16px\">Stake LP tokens to earn</Text>\n        </div>\n\n        <FlexLayout>\n          {farmsList(activeFarms).map((farm) => (\n            <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n          ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const renderInactiveContent = (): JSX.Element => {\n\n    return (\n      <div>\n          <div style={{margin: '20px'}}>\n            <Text fontSize=\"24px\" bold> Inactive Liquidity Pools </Text>\n          </div>\n\n        <FlexLayout>\n            {farmsList(inactiveFarms).map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed/>\n            ))}\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Page>\n        {renderActiveContent()}\n        <StyledHr />\n        {renderInactiveContent()}\n        <div ref={loadMoreRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}